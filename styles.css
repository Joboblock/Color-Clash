html, body {
    height: 100%;
    margin: 0;
}

:root {
    /* Neutral board color used by cells and UI chrome */
    --cell-bg: #e7eddb;
    /* Responsive spacing for player controls */
    --player-gap: clamp(2px, 1.2vmin, 8px);       /* gap between player boxes (columns) */
    --player-row-gap: clamp(12px, 3.6vmin, 36px);  /* vertical gap between cycler row and slider row */
}

/* Base body layout and font */
body {
    font-family: 'Nunito', system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #333;
    transition: background-color var(--delay-animation);
}

/* #region Menu Styles */
/* Main Menu Overlay */
.menu {
    position: fixed;
    inset: 0;
    width: 100vw;
    height: 100dvh; /* dynamic viewport height for modern browsers (Doesn't actualy work :c ) */
    display: flex;
    justify-content: center;
    align-items: center;
    background: rgba(0,0,0,0.45);
    z-index: 10;
}

/* New flex column container holding header + menu */
.menu-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 32px; /* distance between header and menu */
}

/* Header above the menu */
.game-header-panel {
    background: rgba(231, 237, 219, 0.5);
    border-radius: 16px;
    padding: 10px 22px;
    box-shadow: 0 6px 20px rgba(0,0,0,0.25);
    font-weight: 800;
    color: #222;
    font-size: 2.5rem;
    backdrop-filter: blur(4px);
}

.menu-panel {
    width: min(680px, 90vmin);
    background: rgba(231, 237, 219, 0.5); /* add same transparency */
    border-radius: 22px;
    padding: 24px;
    box-shadow: 0 8px 30px rgba(0,0,0,0.45);
    display: flex;
    flex-direction: column;
    gap: 12px;
    align-items: stretch;
    backdrop-filter: blur(4px); /* optional: smooths underlying content */
}

.menu-title {
    margin: 0;
    font-size: 2rem;
    text-align: center;
    padding: 6px 0;
}

.control-row {
    display: flex;
    flex-direction: column;
    gap: 10px;
    align-items: flex-start;
}

.control-row label {
    width: 95px;
    font-weight: 600;
}

.control-row input[type="range"] {
    flex: 1 1 auto;
}

.control-row input[type="number"] {
    width: 72px;
    padding: 6px 8px;
    border-radius: 8px;
    border: 1px solid rgba(0,0,0,0.12);
    background: white;
}

/* Arrange Grid Size row on a grid and place the color cycler in row 2, column 1 */
.grid-size-row {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    grid-auto-rows: auto;
    gap: 8px;
    padding: 8px;                 /* match slider padding for alignment */
    border: 1px solid transparent;/* match slider border thickness for left offset */
    align-items: center;
}

.grid-size-row label {
    grid-column: 7;
    grid-row: 1;
    justify-self: end;
}

.grid-size-row #menuGridSize {
    grid-column: 8;
    grid-row: 1;
    justify-self: start;
}

/* Color cycler in second row, first column */
/* Color cycler is no longer in the grid-size row; it's part of the player slider grid */

/* Grid handles alignment; no extra margin needed for the color cycler */

.menu-color-box {
    width: 100%; /* fill grid column */
    aspect-ratio: 1 / 1; /* always square */
    border-radius: 25%;
    border: 2px solid rgba(255,255,255,0.6);
    box-shadow: 0 4px 10px rgba(0,0,0,0.12);
    background-color: var(--menu-outer-color, var(--cell-green)); /* default (green) */
    transition: background-color var(--delay-animation);
    cursor: pointer;
    position: relative;
    box-sizing: border-box;
    /* Prevent mobile tap highlight and unintended text selection */
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    user-select: none;
    -webkit-user-select: none;
}

.menu-color-box:focus-visible {
    outline: 3px solid rgba(0,0,0,0.25);
    outline-offset: 2px;
}

/* When inside the slider, the color cycler visually matches a player box */
.player-box-slider .menu-color-box {
    width: 100%;
    aspect-ratio: 1 / 1;
}

.menu-color-box::after {
    content: '';
    position: absolute;
    /* Inner circle inset proportional to box size to keep ring thickness consistent */
    inset: 12.5%; /* 75% inner circle (matches .inner-circle width/height) */
    border-radius: 50%;
    background: var(--menu-inner-color, var(--inner-green)); /* updated from JS */
    transition: transform var(--delay-animation), background-color var(--delay-animation);
}

/* Grid wrapper to align cycler (row 1) and slider (row 2) on the same column rhythm */
.player-grid-wrapper {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    column-gap: var(--player-gap);
    row-gap: var(--player-row-gap);
    padding: var(--player-gap);
    border: 1px solid transparent; /* match grid-size-row left offset */
    align-self: center; /* center within control row */
    width: 100%;
    box-sizing: border-box;
    /* keep wrapper visually transparent */
}

/* Prevent grid children (like inputs) from imposing a min-content width on columns */
.player-grid-wrapper > * {
    min-width: 0;
    max-width: 100%;
}

/* Place slider to span full second row; keep its own chrome contained */
.player-grid-wrapper .player-box-slider {
    grid-column: 1 / -1;
    grid-row: 2;
}

/* Place cycler in first row, first column */
.player-grid-wrapper .menu-color-box {
    grid-column: 1;
    grid-row: 1;
    align-self: end;       /* sit at the bottom of its grid area */
    justify-self: center;  /* center horizontally within the column */
}

/* Grid Size tile in row 3, columns 1-2 */
.player-grid-wrapper .player-size-tile {
    grid-column: 1 / 3;
    grid-row: 3;
    display: grid;
    grid-template-rows: auto 1fr auto; /* label on top, spacer, stepper at bottom */
    align-items: stretch;
}

.player-grid-wrapper .player-size-label {
    font-weight: 700;
    justify-self: start;
}

.player-grid-wrapper .size-stepper {
    display: grid;
    grid-template-columns: min-content max-content min-content; /* keep value compact */
    align-items: center;
    gap: var(--player-gap);
}

.player-grid-wrapper .size-btn {
    appearance: none;
    -webkit-appearance: none;
    border: 1px solid rgba(0,0,0,0.12);
    background: rgba(255,255,255,0.9);
    color: #333;
    border-radius: 10px;
    padding: 6px 10px;
    font-weight: 800;
    line-height: 1;
    cursor: pointer;
    box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}

.player-grid-wrapper .size-btn:active {
    transform: translateY(1px);
}

.player-grid-wrapper .size-value {
    width: 3ch;            /* content width for up to 3 chars */
    max-width: 3ch;        /* prevent stretching */
    min-width: 0;          /* allow shrinkage in grid */
    box-sizing: content-box; /* width excludes padding/border for tight fit */
    justify-self: center;
    text-align: center;
    padding: 4px 6px;      /* smaller padding to keep it compact */
    border-radius: 10px;
    border: 1px solid rgba(0,0,0,0.12);
    background: #fff;
    font-weight: 700;
    appearance: textfield;
    -moz-appearance: textfield;
}

/* Remove numeric spinners on WebKit */
.player-grid-wrapper .size-value::-webkit-outer-spin-button,
.player-grid-wrapper .size-value::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

/* Name input to the right of the color cycler (fills remaining columns on row 1) */
.player-grid-wrapper .player-name-input {
    grid-column: 2 / -1;
    grid-row: 1;
    align-self: center;
    width: 100%;
    padding: 10px 12px;
    border-radius: 12px;
    border: 1px solid rgba(0,0,0,0.12);
    background: #fff;
    box-sizing: border-box;
    font: inherit;
}

.player-grid-wrapper .player-name-input::placeholder {
    color: rgba(0,0,0,0.45);
}

/* Invalid state highlight for too-short names */
.player-grid-wrapper .player-name-input.invalid {
    border-color: rgba(220, 38, 38, 0.85); /* red-600-ish */
    box-shadow: 0 0 0 2px rgba(220, 38, 38, 0.15);
}

.menu-actions {
    display: flex;
    gap: 8px;
    justify-content: center;
    margin-top: 6px;
}

.btn {
    background: #5f95d5;
    color: white;
    border: none;
    padding: 10px 18px;
    border-radius: 12px;
    font-weight: 700;
    cursor: pointer;
    box-shadow: 0 4px 14px rgba(0,0,0,0.2);
}

.btn.secondary {
    background: transparent;
    color: #333;
    border: 1px solid rgba(0,0,0,0.08);
}

.menu-hint {
    font-size: 0.8rem;
    color: rgba(0,0,0,0.6);
    text-align: center;
    margin: 0; /* remove all margins */
}

/* Player box slider (visual) */
.player-box-slider {
    display: grid; /* align children to wrapper columns via subgrid */
    grid-template-columns: subgrid;
    gap: var(--player-gap);
    align-items: center;
    width: 100%;
    position: relative;
    box-sizing: border-box; /* ensure padding stays inside width */
    /* Keep container transparent; chrome applied via ::before limited to first row */
}

/* Fallback for browsers without subgrid support */
@supports not (grid-template-columns: subgrid) {
    .player-grid-wrapper { grid-template-columns: repeat(8, 1fr); }
    .player-box-slider { grid-template-columns: repeat(8, 1fr); }
}

/* Limit background/border to the first row area only */
.player-box-slider::before {
    content: '';
    position: absolute;
    /* Extend beyond the first row a little (vertical and horizontal bleed) */
    inset: calc(var(--player-gap) * -1);
    /* Compute height of first row: we use the tallest box plus vertical padding. Since boxes are square with aspect-ratio in grid columns, the row height equals a column width. We approximate with 1fr track height using grid metrics by stretching behind the first row only. */
    /* Use padding box to sit under boxes */
    background: var(--cell-bg);
    border-radius: 12px;
    border: 1px solid rgba(0,0,0,0.06);
    z-index: 0;
    pointer-events: none; /* never block interactions with neighboring elements */
}

/* Ensure grid content appears above the background */
.player-box-slider > * {
    position: relative;
    z-index: 1;
}

/* cycler is no longer a child of .player-box-slider; placed by wrapper */

.player-box-slider .box {
    width: 100%; /* fill its grid column */
    aspect-ratio: 1 / 1; /* keep squares */
    border-radius: 25%; /* proportional rounding that scales with box size */
    box-sizing: border-box; /* include the 2px border in the grid column width */
    box-shadow: 0 4px 10px rgba(0,0,0,0.12);
    /* default background is the lighter 'cell' color for this box */
    background: var(--box-cell, #ccc);
        /* Remove box-shadow from CSS transitions to avoid fighting WAAPI shadow animation */
        transition: transform .12s ease, opacity .12s ease;
    border: 2px solid rgba(255,255,255,0.6);
    -webkit-user-drag: none;
    user-select: none;
    touch-action: none; /* allow pointer events without default gestures */
}

.player-box-slider .box.active {
    transform: translateY(-18%) scale(1.06); /* lift proportional to height */
    transform-origin: center center;
    /* active boxes use the inner circle (strong) color */
    background: var(--box-inner, #999);
    box-shadow: 0 8px 20px rgba(0,0,0,0.18);
}
/* #endregion */


/* #region Game Styles */
/* grid-size slider track coloring using CSS variable */
.grid-size { display: none; }


.grid {
    display: grid;
    grid-template-columns: repeat(var(--grid-size), 1fr);
    gap: calc(50vmin / (var(--grid-size) * 8));
    margin: auto;
}

.cell {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: calc((95vmin - (var(--grid-size) - 1) * (100vmin / (var(--grid-size) * 8))) / var(--grid-size));
    height: calc((95vmin - (var(--grid-size) - 1) * (100vmin / (var(--grid-size) * 8))) / var(--grid-size));
    background-color: var(--cell-bg);
    border-radius: 25%;
    transition: background-color var(--delay-animation);
}

.inner-circle {
    position: absolute;
    width: 75%;
    height: 75%;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
    transition: transform var(--delay-animation) ease-in-out, background-color var(--delay-animation) ease-in-out, opacity var(--delay-explosion) ease-out;
}

.inner-circle.fade-out {
    opacity: 0.0;
}

.inner-circle.animated {
    transition: transform var(--delay-explosion) ease-out, opacity var(--delay-explosion) ease-out; /* Add opacity transition */
}

@keyframes moveAnimation {
    0% { transform: translate(0, 0); }
    100% { /* Final position is set in JS */ }
}

.value-circle {
    position: absolute;
    width: 20%;
    height: 20%;
    background-color: #fff;
    border-radius: 50%;
    z-index: 3; /* Above inner circles */
    /* Use CSS variables for proportional translation */
    transform: translate(calc(var(--tx, 0) * 1%), calc(var(--ty, 0) * 1%));
    transition:
        transform var(--delay-animation) ease,
        opacity var(--delay-animation) ease;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Player Colors for Cells (Pastel) (use JS-set CSS variables) */
.cell.red { background-color: var(--cell-red) !important; }
.cell.orange { background-color: var(--cell-orange) !important; }
.cell.yellow { background-color: var(--cell-yellow) !important; }
.cell.green { background-color: var(--cell-green) !important; }
.cell.cyan { background-color: var(--cell-cyan) !important; }
.cell.blue { background-color: var(--cell-blue) !important; }
.cell.purple { background-color: var(--cell-purple) !important; }
.cell.magenta { background-color: var(--cell-magenta) !important; }

.cell.invalid { background-color: #b8beac; }
.cell.hidden { background-color: var(--cell-bg) !important;}

/* Player Colors for Inner Circles (Strong) (use JS-set CSS variables) */
.inner-circle.red { background-color: var(--inner-red); }
.inner-circle.orange { background-color: var(--inner-orange); }
.inner-circle.yellow { background-color: var(--inner-yellow); }
.inner-circle.green { background-color: var(--inner-green); }
.inner-circle.cyan { background-color: var(--inner-cyan); }
.inner-circle.blue { background-color: var(--inner-blue); }
.inner-circle.purple { background-color: var(--inner-purple); }
.inner-circle.magenta { background-color: var(--inner-magenta); }

/* Body Colors (Strong) (use JS-set CSS variables) */
body.red { background-color: var(--body-red); }
body.orange { background-color: var(--body-orange); }
body.yellow { background-color: var(--body-yellow); }
body.green { background-color: var(--body-green); }
body.cyan { background-color: var(--body-cyan); }
body.blue { background-color: var(--body-blue); }
body.purple { background-color: var(--body-purple); }
body.magenta { background-color: var(--body-magenta); }
/* #endregion */